---
layout: post
title:  "TWIL"
date:   2014-10-04
---

I've been bouncing all around for quite some time and I'm ready to accept that as my way of life. For the last three months I've been working on my [Rails Girls Summer of Code project](https://github.com/browserspree), so my time for other learnings was somewhat limited. That didn't stop me from trying, but not finishing, many other things over that time though. The program officially ended at the end of September. The work will still continue to some extent but we were able to reach our initial goal just in time. Once we released our [gem](http://rubygems.org/gems/bcms_spree) (Pause for a moment to "OMG I released a gem!") I decided to focus my bouncing to learn at least one thing per day.

**October 1st - Flexbox**

I first learned about flexbox while listening to the [Shop Talk Show](http://shoptalkshow.com/) podcast. The CSS3 Flexbox layout model allows you to arrange content without the need for a grid framework. No need for floats, inline-blocks, or additional stylesheets. Chris Coiyer, one of the hosts of Shop Talk Show, also runs a website I love, [CSS Tricks](http://css-tricks.com/) and he published a great [guide](http://css-tricks.com/snippets/css/a-guide-to-flexbox/) on flexbox. I read that a few months ago but went over it again. I used it in tandem with a video series on tutsplus called [CSS: Flexbox Essentials](https://webdesign.tutsplus.com/courses/css-flexbox-essentials). It was nice to go back and forth between watching someone actually write html and css and reading all the additional options each attribute has. Both resources together definitely made me feel more solid about working with the flexbox attributs and I was able to apply them to my gem demo's [home page](https://browserspree.herokuapp.com/). Once I got going I found it much easier to implement than trying to add something like Bootstrap and figuring out the floats and alignments for graphics and text.

**October 2nd - Parallax**

I may need to implement some degree of parallax scrolling to a site at work and although I think it's cool, I've never really looked into how it works. I'm a little skeptical about the appropriateness of parallax in most cases, but it was fun to play around with. Once again tutsplus came through with a great video course, [Parallax Scrolling for Web Design](https://webdesign.tutsplus.com/courses/parallax-scrolling-for-web-design). I now know it's actually pretty easy to make a site with simple parallax scrolling. It just requires setting up the divs correctly in the html and then manipulating the scrolling speeds of each of those divs with a little jquery. Here's the [demo](../Bprojects/parallax_100214/index.html
) I put together during the course.

**October 3rd - Project Oriented Design in Ruby**

Sandi Metz is my hero. I absolutely love her book, [Project Oriented Design in Ruby](http://www.poodr.com/). As soon as I started reading I was absolutely in love. I enjoy the style of writing. It's not overly technical, but at the same time it doesn't feel dumbed down. I also like how realistic and understandable the code examples are. I got almost all the way through the first four chapters of the book. It's the first programming resource I've read that spent anytime talking about designing code rather than simply writing it. 

The second chapter, Designing Classes with a Single Responsibility, and the fourth chapter, Creating Flexible Interfaces, were my particular favorites of the day. In the projects I've done in the past I've had a hard time breaking up and delegating behavior to the right classes. Often times I tried to get away with as much "stuff" in as few methods as possible because I didn't really know any other ways. One thing Sandi says that really resonated with me was "asking for 'what' instead of 'how'". To paraphrase one of her examples, when you're at restaurant you choose what you want, but you don't tell the kitchen how to make it. I would focus so much on how each step of an action or process needed to be done and try to outline it in methods. This would back me into a corner once I thought of additional scenarios that would affect my project. My code will be cleaner and more stable if I'm more aware of what my classes need and whether that responsibility resides with them or is est placed in other classes.

I also really enjoyed the diagrams and their progressions as she moved through the ways to improve the code design.

**October 4th - Project Oriented Design in Ruby**

Completed chapters four, five and six of POODR. Chapter six finally gave me the sense that I really understand inheritance. At the same time it introduced me to some ways of writing methods for superclasses and subclasses that I hadn't known before. For example, I really liked how rather than adding super to subclass methods in order for them to send requests for information to the superclass, she restructured the code so the superclass would send hook messages to the subclasses. This gives the superclass the authority and the subclasses trust it and merely add to it, without needed to know how it is already structured.